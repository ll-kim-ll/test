<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:s="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- 디렉토리와 파일에 접근할 수 있는 권한 설정 -->
	<s:http auto-config='true' use-expressions="true"> <!-- auto-config='true' 스프링 시큐리티가 기본 로그인페이지를 제공해준다 -->
		<s:intercept-url pattern="/favicon.ico" access="hasRole('ROLE_ANONYMOUS')" />
		<s:intercept-url pattern="/resources/**" access="permitAll" />
		<s:intercept-url pattern="/login/**" access="permitAll" />
		<s:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')" />

		<!-- 로그인 페이지를 커스텀 -->
		<s:form-login login-page="/login/loginPage.do"
					login-processing-url="/login.do"
					authentication-failure-url="/login/loginPage.do?err=true"

					default-target-url="/"
					username-parameter="userid"
					password-parameter="userpw" />
<!--	-login-page 속성에 앞서 만든 로그인 페이지의 url을 입력한다.
		-login-processing-url 속성은 loginPage.jsp를 만들 때, <form>태그의 action URL이다. 즉, login을 처리하는 부분이 따로 필요하지 않다.
		-authentication-failure-url 속성은 로그인을 실패했을 때(아이디와 패스워드가 틀린 경우) 이동할 url이다. 본 예제에서는 로그인 페이지에 err파라미터를 true로 보냈다. 그리고 loginPage.jsp에서 jstl로 예외 처리하였습니다.
		-default-target-url 속성은 로그인이 성공했을 때 이동하는 주소이다.
		-username-parameter와 password-parameter는 로그인시 파라미터로 전달받을 이름을 정의한다. loginPage.jsp에서 정의한 로그인 아이디와 비밀번호를 입력받는 <input> 태그의 name과 일치해야 한다.
-->

		<!--  세션 수를 설정하여 중복 로그인을 방지할 수 있다. 중복 로그인이 발생하는 경우 expired-url로 이동한다. -->
		<s:session-management>
			<s:concurrency-control max-sessions="1" expired-url="/" />
		</s:session-management>
		<s:access-denied-handler error-page="/login/accessDenied.do" />

		<!--
		<s:intercept-url pattern="/resources/**" access="permitAll" />
		<s:intercept-url pattern="/login/**" access="permitAll" />
		<s:form-login login-page="/login/loginPage.do"
					login-processing-url="/login.do"
					authentication-failure-url="/login/loginPage.do?err=true"
					default-target-url="/" username-parameter="userId"
					password-parameter="userPw" />
		<s:session-management>
			<s:concurrency-control max-sessions="1" expired-url="/" />
		</s:session-management>
		<s:access-denied-handler error-page="/err.do" />
 -->

	</s:http>
	<!-- 패스워드 인코딩 빈 등록 -->
	<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
	<!-- 커스텀 서비스 등록 -->
<!--
	<bean id="customUserDetailsService" class="com.wellrising.uds.www.sample.securitySample.service.CustomUserDetailsService"></bean>
 -->

 <!-- 유저들의 권한을 설정 -->
	<s:authentication-manager>
		<s:authentication-provider>
<!--
			<s:user-service>
				<s:user name="admin" password="{noop}1234" authorities="ROLE_USER, ROLE_ADMIN" />
				<s:user name="guest" password="{noop}1234" authorities="ROLE_USER" />
				<s:user name="guest2" password="{noop}a1234" authorities="ROLE_USER" />
			</s:user-service>

-->
<!-- <jdbc-user-service data-source-ref="dataSource" /> : root-context.xml에서 설정한 bean id를 가져온다.
 - user-by-username-query : 사용자 인증을 가져온다. username, password, enabled 컬럼은 필수이다.
  이는 스프링에서 지정된 컬럼명이며 만일 테이블 커럶과 다른 경우 별칭(AS)을 줘서 변경하도록 한다.
  Enabled 필드 값이 0이면 비활성이고 1이면 활성을 의미한다.
 - authorities-by-username-query : 권한 인증을 가져온다. Authority 필드 값은 "ROLE_ADMIN" 이나 "ROLE_USER"가 오도록 한다.
-->

			<s:password-encoder ref="bcryptPasswordEncoder" />

			<s:jdbc-user-service data-source-ref="dataSource"
								users-by-username-query="SELECT USERID as USERNAME,
								                                USERPW as PASSWORD,
								                                1 as enabled
														   FROM MEMBER
														  WHERE USERID=?"
								authorities-by-username-query="SELECT USERID as USERNAME,
																	  AUTH AS authority
																 FROM MEMBER_AUTH
																WHERE USERID=?" />

		</s:authentication-provider>

<!--
		<s:authentication-provider user-service-ref="customUserDetailsService">
			<s:password-encoder ref="bcryptPasswordEncoder" />
		</s:authentication-provider>
 -->
	</s:authentication-manager>

</beans>

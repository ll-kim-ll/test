<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:s="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- AuthenticationSuccessHandler 인터페이스 구현 (객체등록)(로그인 성공시) -->
	<bean id="customAccessSuccessHandler" class="com.wellrising.uds.www.sample.securitySample.service.CustomAccessSuccessHandler"></bean>
<!-- AuthenticationSuccessHandler 인터페이스 구현 (객체등록)(로그인 성공시) -->
	<bean id="customAccessFailureHandler" class="com.wellrising.uds.www.sample.securitySample.service.CustomAccessFailureHandler"></bean>
<!-- AcessDeniedHandler 인터페이스를 구현하는 경우 (객체등록)(url 접근 제한 오류 페이지)  -->
	<bean id="customAccessDeniedHandler" class="com.wellrising.uds.www.sample.securitySample.service.CustomAccessDeniedHandler"></bean>

	<!-- 정적 리소스는 모두 접근 허용 -->
	<s:http pattern="/css/**" security="none"/>
	<s:http pattern="/html/**" security="none"/>
    <s:http pattern="/images/**" security="none"/>
 	<s:http pattern="/js/**" security="none"/>
 	<s:http pattern="/resource/**" security="none"/>
 	<s:http pattern="/favicon.ico" security="none"/>
 	<s:http pattern="/error/**" security="none"/>

	 	<!-- 문서변환 등 URL Mapping 대상 -->
	 	<!-- <s:http pattern="/resources/**" security="none"/> -->
	 	<!-- 본문 미리보기 -->
	 	<!-- <s:http pattern="/mail/preview/body.do" security="none"/> -->
	 	<!-- <s:http pattern="/mail/preview/embed/image.do" security="none"/> -->

		<!-- 패턴 조건 추가 -->
	 	<!-- <s:http pattern="\A/WEB-INF/jsp/.*\Z" request-matcher="regex" security="none"/> -->

	<s:http auto-config="true" use-expressions="true">
		<!-- CSRF 토큰 생성을 비활성화 -->
		<!-- <s:csrf disabled="true"/> -->

		<!-- CSRF 사용 시-->
		<!-- <form:form > 사용할 경우 자동으로 값을 넣어 줌.  -->
		<!-- <form:form > 미사용 시 form 안에 <input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" /> 또는 <s:csrfInput /> 사용해야 함. -->
		<!-- ajax  POST 호출 시 오류 발생 오류 해결 방법(추가 하면서 form 안에 내용 자동 추가도 포함 시킴) -->
		<!-- 공통 스크립트 부분에서 처리 하면 됨.(topLayout 적용 함) -->

		<!--
 		<sec:authorize access="isAuthenticated()">
 		-->
			<!-- csrf 처리 -->
		<!--
			<sec:csrfMetaTags />
			<script>
				try {
					var csrfParameter = $("meta[name='_csrf_parameter']").attr("content");
					var csrfHeader = $("meta[name='_csrf_header']").attr("content");
					var csrfToken = $("meta[name='_csrf']").attr("content");

					// ajax가 호출 되는 전역
					$.ajaxSetup({
						beforeSend: function(xhr, settings) {
							if (!/^(GET|HEAD|OPTIONS)$/i.test(settings.type) && !this.crossDomain) {
								xhr.setRequestHeader(csrfHeader, csrfToken)
							}
						}
					});
					// form
					$("form").each(function() {
/*
						var input = $("<input/>").attr({type:"hidden", name:csrfParameter, value:csrfToken});
						$(this).append(input);
*/
						$(this).append($('<input/>',{type:'hidden', name:csrfParameter, value:csrfToken}));
					});
				} catch(e) {
					console.log(e);
				}
			</script>
 		-->
			<!-- csrf 처리 -->
 		<!--
 		</sec:authorize>
		 -->


		<!-- 정적 리소스는 모두 접근 허용 -->
		<!-- <s:intercept-url pattern="/resources/**" access="permitAll" /> -->
		<s:intercept-url pattern="/index.do" access="permitAll" />
		<s:intercept-url pattern="/login/**" access="permitAll" />
		<s:intercept-url pattern="/users/**" access="permitAll" />


		<!-- 로그인된 상태에서는 로그인이나 회원가입 화면에 접근 못하도록 함 -->
		<s:intercept-url pattern="/loginView.do" access="isAnonymous()" />
		<s:intercept-url pattern="/registerUserView.do" access="isAnonymous()" />

		<!-- 관리자페이지는 관리자만 접근 허용 -->
<!-- 		<s:intercept-url pattern="/admin/**/*.do" access="hasRole('ROLE_ADMIN')" />
 -->

		<s:intercept-url pattern="/admin.do" access="hasRole('ROLE_ADMIN')" />
		<s:intercept-url pattern="/member.do" access="hasRole('ROLE_MEMBER')" />
		<s:intercept-url pattern="/user.do" access="hasRole('ROLE_USER')" />

<!-- 		<s:intercept-url pattern="/device/command" access="hasRole('ROLE_ADMIN')" />
 -->
		<s:intercept-url pattern="/**" access="permitAll" />


		<!-- 로그인 설정 -->
		<s:form-login
			username-parameter="userid"
			password-parameter="userpw"
			login-page="/login/loginPage.do"
			login-processing-url="/login.do"
			default-target-url="/"
			authentication-failure-handler-ref="customAccessFailureHandler"
		/>
<!--
		<s:form-login
			username-parameter="userid"
			password-parameter="userpw"
			login-page="/login/loginPage.do"
			login-processing-url="/login.do"
			authentication-success-handler-ref="customAccessSuccessHandler"
			authentication-failure-handler-ref="customAccessFailureHandler"
		/>
 -->
<!--
		<s:form-login
			username-parameter="userid"
			password-parameter="userpw"
			login-processing-url="/login.do" 미설정시&jsp action 미설정 시 페이지 url post 전송
			login-page="/login/loginPage.do" default-target-url="/"
			authentication-success-handler-ref="customAccessSuccessHandler"
			authentication-failure-url="/login/loginPage.do?err=true" />
-->
<!--
* username-parameter : 입력한 ID에 대한 파라미터 네임
* password-parameter : 입력한 PW에 대한 파라미터 네임
* login-processing-url : View 페이지의 <form action="/url"> 에서 지정한 URL
* login-page : 서블릿에 넘겨줄 로그인 페이지 URL
* default-target-url : 로그인에 성공하면 보내줄 페이지
* authentication-failure-url : 로그인에 실패하면 보내줄 페이지
-->
		<!-- 로그아웃 설정 -->
		<s:logout logout-url = "/customLogout.do"
		          logout-success-url="/"
		          invalidate-session = "true"/>
<!--
		<s:logout
			logout-url="/logout.do"
			logout-success-url="/"
			invalidate-session="true"
			delete-cookies="true" />
-->

<!--
* logout-url : 로그아웃 요청에 대한 URL (버튼 눌렀을 때 발생하는 요청 URL)
* logout logout-success-url : 로그아웃 완료되면 보내줄 URL
* invalidate-session : 세션 삭제 여부
* delete-cookies : 쿠키 삭제 여부
-->

		<!-- 권한이 없어서 금지된 URI 접속할 때 보여줄 페이지(403 에러 페이지 대체) -->
		<s:access-denied-handler error-page="/accessDenied.do" />

		<!-- AcessDeniedHandler 인터페이스를 구현하는 경우 (객체등록)(url 접근 제한 오류 페이지) -->
		<!--
		<s:access-denied-handler error-page="customAccessDeniedHandler" />
		-->


	</s:http>
<!-- 패스워드 암호화 -->
<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
<!-- 기본 사용자, 권한 로직 -->
<bean id="customUserDetailsService" class="com.wellrising.uds.www.sample.securitySample.service.CustomUserDetailsService" />
<!-- 기본 사용자, 권한 로직 확장 버전 -->
<bean id="customAuthenticationProvider" class="com.wellrising.uds.www.sample.securitySample.service.CustomAuthenticationProvider" />

	<!-- DB 연동 설정 -->
<!-- 	<s:authentication-manager>
		<s:authentication-provider>
			<s:password-encoder ref="bcryptPasswordEncoder"/>

			<s:jdbc-user-service data-source-ref="dataSource"
								users-by-username-query="SELECT USERID as USERNAME,
								                                USERPW as PASSWORD,
								                                1 as enabled
														   FROM MEMBER
														  WHERE USERID=?"
								authorities-by-username-query="SELECT USERID as USERNAME,
																	  AUTH AS authority
																 FROM MEMBER_AUTH
																WHERE USERID=?" />
		</s:authentication-provider>
	</s:authentication-manager>
 -->

	<!-- customUserDetailsService 기본으로 사용해도 충분함-->
	<s:authentication-manager>
		<s:authentication-provider user-service-ref="customUserDetailsService">
			<s:password-encoder ref="bcryptPasswordEncoder" />
		</s:authentication-provider>

<!-- customAuthenticationProvider 방식
		<s:authentication-provider ref="customAuthenticationProvider">
		</s:authentication-provider>
-->
	</s:authentication-manager>

</beans>

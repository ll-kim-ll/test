<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:s="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

<!-- AuthenticationSuccessHandler 인터페이스 구현 (객체등록)(로그인 성공시) -->
	<bean id="customAccessSuccessHandler" class="com.wellrising.uds.www.sample.securitySample.service.CustomAccessSuccessHandler"></bean>
<!-- AuthenticationSuccessHandler 인터페이스 구현 (객체등록)(로그인 성공시) -->
	<bean id="customAccessFailureHandler" class="com.wellrising.uds.www.sample.securitySample.service.CustomAccessFailureHandler"></bean>
<!-- AcessDeniedHandler 인터페이스를 구현하는 경우 (객체등록)(url 접근 제한 오류 페이지)  -->
	<bean id="customAccessDeniedHandler" class="com.wellrising.uds.www.sample.securitySample.service.CustomAccessDeniedHandler"></bean>

	<s:http auto-config="true" use-expressions="true">
		<!-- CSRF 토큰 생성을 비활성화(<input type="hidden" name="${_csrf.parameterName}" value="${_csrf.token}" /> )-->
<!-- 		<s:csrf disabled="true"/> -->

		<!-- 정적 리소스는 모두 접근 허용 -->
		<s:intercept-url pattern="/resources/**" access="permitAll" />
		<s:intercept-url pattern="/index.do" access="permitAll" />
		<s:intercept-url pattern="/login/**" access="permitAll" />
		<s:intercept-url pattern="/users/**" access="permitAll" />

		<s:intercept-url pattern="/admin.do" access="permitAll" />
		<s:intercept-url pattern="/member.do" access="permitAll" />
		<s:intercept-url pattern="/user.do" access="permitAll" />

		<!-- 로그인된 상태에서는 로그인이나 회원가입 화면에 접근 못하도록 함 -->
		<s:intercept-url pattern="/loginView.do" access="isAnonymous()" />
		<s:intercept-url pattern="/registerUserView.do" access="isAnonymous()" />

		<!-- 관리자페이지는 관리자만 접근 허용 -->
		<s:intercept-url pattern="/admin/**/*.do" access="hasRole('ROLE_ADMIN')" />
		<s:intercept-url pattern="/**" access="hasRole('ROLE_ADMIN')" />

<!-- 		<s:intercept-url pattern="/device/command" access="hasRole('ROLE_ADMIN')" />
 -->
		<s:intercept-url pattern="/**" access="permitAll" />


		<!-- 로그인 설정 -->
		<s:form-login
			username-parameter="userid"
			password-parameter="userpw"
			login-page="/login/loginPage.do"
			login-processing-url="/login.do"
			authentication-success-handler-ref="customAccessSuccessHandler"
			authentication-failure-handler-ref="customAccessFailureHandler"
		/>
<!--
		<s:form-login
			username-parameter="userid"
			password-parameter="userpw"
			login-processing-url="/login.do" 미설정시&jsp action 미설정 시 페이지 url post 전송
			login-page="/login/loginPage.do" default-target-url="/"
			authentication-success-handler-ref="customAccessSuccessHandler"
			authentication-failure-url="/login/loginPage.do?err=true" />
-->
<!--
* username-parameter : 입력한 ID에 대한 파라미터 네임
* password-parameter : 입력한 PW에 대한 파라미터 네임
* login-processing-url : View 페이지의 <form action="/url"> 에서 지정한 URL
* login-page : 서블릿에 넘겨줄 로그인 페이지 URL
* default-target-url : 로그인에 성공하면 보내줄 페이지
* authentication-failure-url : 로그인에 실패하면 보내줄 페이지
-->
		<!-- 로그아웃 설정 -->
		<s:logout logout-url = "/customLogout.do"
		          logout-success-url="/"
		          invalidate-session = "true"/>
<!--
		<s:logout
			logout-url="/logout.do"
			logout-success-url="/"
			invalidate-session="true"
			delete-cookies="true" />
-->

<!--
* logout-url : 로그아웃 요청에 대한 URL (버튼 눌렀을 때 발생하는 요청 URL)
* logout logout-success-url : 로그아웃 완료되면 보내줄 URL
* invalidate-session : 세션 삭제 여부
* delete-cookies : 쿠키 삭제 여부
-->

		<!-- 권한이 없어서 금지된 URI 접속할 때 보여줄 페이지(403 에러 페이지 대체) -->
		<s:access-denied-handler error-page="/accessDenied.do" />

		<!-- AcessDeniedHandler 인터페이스를 구현하는 경우 (객체등록)(url 접근 제한 오류 페이지) -->
		<!--
		<s:access-denied-handler error-page="customAccessDeniedHandler" />
		-->


	</s:http>
<!-- 패스워드 암호화 -->
<bean id="bcryptPasswordEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" />
<!-- 기본 사용자, 권한 로직 -->
<bean id="customUserDetailsService" class="com.wellrising.uds.www.sample.securitySample.service.CustomUserDetailsService" />
<!-- 기본 사용자, 권한 로직 확장 버전 -->
<bean id="customAuthenticationProvider" class="com.wellrising.uds.www.sample.securitySample.service.CustomAuthenticationProvider" />

	<!-- customUserDetailsService 기본으로 사용해도 충분함-->
	<s:authentication-manager>
		<s:authentication-provider user-service-ref="customUserDetailsService">
			<s:password-encoder ref="bcryptPasswordEncoder" />
		</s:authentication-provider>

<!-- customAuthenticationProvider 방식
		<s:authentication-provider ref="customAuthenticationProvider">
		</s:authentication-provider>
-->
	</s:authentication-manager>

</beans>

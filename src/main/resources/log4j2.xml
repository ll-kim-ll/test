<?xml version="1.0" encoding="UTF-8"?>
<Configuration xmlns:log4j="http://jakarta.apache.org/log4j/">

 <!--    해당 설정파일에서 사용하는 프로퍼티-->
    <Properties>
        <Property name="logNm">Spring Log4j2 Test</Property>
        <Property name="layoutPattern">%style{%d{yyyy-MM-dd HH:mm:ss,SSS}}{cyan} %highlight{[%-5p]}{FATAL=bg_red, ERROR=red,
            INFO=green, DEBUG=blue}  [%C] %style{[%t]}{yellow}- %m%n -</Property>
    </Properties>

    <Appenders>
        <Console name="console" target="SYSTEM_OUT">
            <PatternLayout pattern="${layoutPattern}"/>
        </Console>

<!-- 		<RollingFile name="logFile" fileName="/logs/api.log" filePattern="/logs/$${date:yyyyMM}/app_%d{yyyyMMdd}-%i.log.gz"> -->
<!-- 		<RollingFile name="logFile" fileName="/home/app/logs/wellrisingUds.log" filePattern="/home/app/logs/wellrisingUds/$${date:yyyyMM}/wellrisingUds_%d{yyyyMMddHHmm}-%i.log.gz"> -->
			<RollingFile name="logFile" fileName="/home/app/logs/wellrisingUds.log" filePattern="/home/app/logs/wellrisingUds/wellrisingUds_%d{yyyyMMdd}-%i.log.gz">
			<PatternLayout pattern="%d %5p [%c] %m%n" />
            <Policies>
<!-- 파일 사이즈 -->
<!--                 <SizeBasedTriggeringPolicy size="200KB"/> -->
                <TimeBasedTriggeringPolicy interval="1"/> <!-- 1은 위에 filePattern 의 월,일,시,분,초 단위  -->
            </Policies>
            <DefaultRolloverStrategy max="10" fileIndex="min"/> <!-- 인덱스 관련 설정 위에 filePattern -%i 파일 인덱스 생성 -->
		</RollingFile>


    </Appenders>

	<Loggers>
		<!-- Application Loggers -->
		<Logger name="com.wellrising.uds" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
<!-- 			<AppenderRef ref="logFile" /> -->
		</Logger>

		<!-- 3rdparty Loggers -->
		<Logger name="org.springframework" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
		</Logger>
<!--
		<Logger name="org.springframework.core" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
		</Logger>
		<Logger name="org.springframework.beans" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
		</Logger>
		<Logger name="org.springframework.context" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
		</Logger>
		<Logger name="org.springframework.web" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
		</Logger>
-->
		<Logger name="org.springframework.transaction" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
		</Logger>

		<!-- SQL Logger -->

		<Logger name="jdbc.connection" level="ERROR " additivity="false">
			<AppenderRef ref="console" />
		</Logger>
		<Logger name="jdbc.sqlonly" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
		</Logger>
		<Logger name="jdbc.sqltiming" level="DEBUG" additivity="false">
			<AppenderRef ref="console" />
		</Logger>
		<Logger name="jdbc.resultsettable" level="ERROR " additivity="false">
			<AppenderRef ref="console" />
		</Logger>

		<Logger name="jdbc.audit" level="ERROR " additivity="false">
			<AppenderRef ref="console" />
		</Logger>

		<Logger name="jdbc.resultset" level="ERROR " additivity="false">
			<AppenderRef ref="console" />
		</Logger>

	<!--
	jdbc.connection : 열려있는 모든 번호와 연결 수립 및 해제 이벤트를 기록. 이는 연결 문제를 찾아내는데 매우 유용 (Connection Pool 설정)
	jdbc.sqlonly : SQL 쿼리 문장만 로그로 남긴다. PreparedStatement일 경우 관련된 argument 값으로 대체된 SQL문이 보여진다.
	jdbc.sqltiming : SQL문과 해당 SQL을 실행시키는데 수행된 시간 정보(milliseconds)를 포함한다.
	jdbc.audit : ResultSet을 제외한 모든 JDBC 호출 정보를 로그로 남긴다. 많은 양의 로그가 생성되므로 특별히 JDBC 문제를 추적해야 할 필요가 있는 경우를 제외하고는 사용을 권장하지 않는다.
	jdbc.resultset : ResultSet을 포함한 모든 JDBC 호출 정보를 로그로 남기므로 매우 방대한 양의 로그가 생성된다.
	jdbc.resultsettable : SQL 결과 조회된 데이터의 table을 로그로 남긴다.
	 -->
        <Root level="INFO">
            <AppenderRef ref="console" />
        </Root>
	</Loggers>

</Configuration>
